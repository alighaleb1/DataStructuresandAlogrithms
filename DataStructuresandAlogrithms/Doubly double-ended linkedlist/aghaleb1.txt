Ghaleb Ali
Program #2
COSC 311 Fall 2020
E02049735
10/31/20



Assignment classes
1. COSC311Driver
2. DataBase.java
3. Index
4. IndexRecord
5. StudentRecord




COSC311Driver.java



package PA2;

/* IMPORTANT. All of your programs should have the proper heading. The following should be how all your programs begin:


Name: <your name here>
Assignment Number: <put the assignment number here>
COSC 311 - Winter 2015


*/



/**
 * This will be the main driver program for many of your programs. Specifically,
 * you will need to define a data structure and related algorithms to use with this program.
 * We will be using the data file I have provied for you: a file of 68 records. Each record is composed
 * of three fields:
 *      String lastName
 *      String firstName
 *      String ID
 * ID may be implemented as an integer, but it is easier to implement as a string. Both lastName and firstName
 * may not be unique, but the ID **is** unique.
 * 
 * @author Bill Sverdlik
 * @version Version 1.0
 */


/* Anything special you want the teacher to know? Are you asking for bonus points? Explain here.*/




import java.util.*;

public class COSC311Driver
{

	
    
    public static void main(String[] args)
    {
        /*The following declaration declares a data structure that will change from one assignment to the next. For example, you will need to implement 
         * the following as a doubly linked list, as well as a tree.
         */ 
        
     
	DataBase d=new DataBase();  
   	int response;
        Scanner keyboard=new Scanner(System.in);
        
        
        /* Read the data into the database from the external disk file here
         * IMPORTANT: duplicate ID numbers should not be added. Disregard
         * the entire record for duplicate IDs
         */
        
        
        
        
        do
        {
            System.out.println(" 1 Add a new student");
            System.out.println(" 2 Delete a student");
            System.out.println(" 3 Find a student by ID");
            System.out.println(" 4 List students by ID increasing");
            System.out.println(" 5 List students by first name increasing");
            System.out.println(" 6 List students by last name increasing");
            System.out.println(" 7 List students by ID decreasing");
            System.out.println(" 8 List students by first name decreasing");
            System.out.println(" 9 List students by last name decreasing");
            System.out.println(" ");
            System.out.println(" 0 End");
            
            response=keyboard.nextInt();
            
            switch (response)
            {
                case 1: d.addIt(); 	//Note: if the user enters an ID already in use, issue a warning and return to the menu
                        break;
                case 2: d.deleteIt();	//Note: output either "Deleted" or "ID not Found" and return to menu
                        break;
                case 3: d.findIt();	//Note: output the entire record or the message "ID not Found" and return to menu
                        break;
                case 4: d.ListByIDAscending();		
                        break;
                case 5: d.ListByFirstAscending();	
                        break;
                case 6: d.ListByLastAscending();
                        break;
                case 7: d.ListByIDDescending();
                        break;
                case 8: d.ListByFirstDescending();
                        break;
                case 9: d.ListByLastDescending();
                        break;
                default:                
            }
            
        } while (response!=0);
    }
}
        



DataBase.java


package PA2;

import java.io.*;
import java.util.*;


//Main database class to insert,find,delete,list student information(ID number, First name, Last name).
public class DataBase 
{
	Scanner input = new Scanner(System.in);
	private StudentRecord[] data;  //StudentRecord array contains(id number,first name, last name).
	private Index fname,lname, id; //Objects to use methods from Index class(insert,find,delete,list).
	private int next; // counter for StudentRecord array.
	
	
	/*Default constructor to read in student information(ID number, First name, Last name) from a file
	 into StudentRecord array and IndexRecords class.*/
	public DataBase() 
	{
		next = 0; //count for StudentRecord array starting at zero.
		data = new StudentRecord[100]; //declaring studenRecord array size
		
		//Dynamic doubly double ended ordered linked list Objects(IndexRecord and index)
		fname = new Index(); 
		lname = new Index();
		id = new Index();
		
		//file location
		File f = new File("C:\\Users\\13133\\Desktop\\DataSet.txt");
		String fn, ln, iDn;
		
		//Read/insert student's information from file(first name, last name, id number).
		try 
		{
			Scanner scan = new Scanner(f);
			while(scan.hasNextLine())
			{
				String name = scan.nextLine();
				String lowercase = name.toLowerCase();
				String[] n = lowercase.split(" ");
				fn = n[0];
				ln = n[1];
				iDn = n[2];
				
				//Makes sure same ID number isn't inserted twice from file.	
				if( id.find(iDn) == -1)
				{
					data[next]= new StudentRecord(fn, ln, iDn);
					fname.insert(new IndexRecord(fn,next));
					lname.insert(new IndexRecord(ln,next));
					id.insert(new IndexRecord(iDn,next));
					next++;
				}
				
			}
		} 
		catch (FileNotFoundException e) 
		{
			e.printStackTrace();
		}

	}
		
	/*adds a new student (First name, last name, Id number).
	 Makes sure ID number is never replicated.*/
	public void addIt() 
	{
		System.out.println("\nEnter The following Information"
				+ " In Oder Asked For The New Student!");
		System.out.println("First Name:          "
				+ "Last Name	:	ID Number:");
				
		String fnamE = input.next();
		String lnamE = input.next();
		String iD =  input.next();
				
		int location = isiDinuse(iD);
		if(location == -1 )
		{
			data[next] = new StudentRecord(fnamE, lnamE, iD);
			fname.insert(new IndexRecord(fnamE,next));
			lname.insert(new IndexRecord(lnamE,next));
			id.insert(new IndexRecord(iD,next));
			next++;
			
		 }
		else if(location > -1)
		{
			System.out.println("\nID Is Already In Use!");
			System.out.println("Press 3 To Look Up The Record"
					+ " By Using The ID Number.\n");
		}
	}	
		
	//Find a  student information by ID number entered by user.
	public void findIt()
	{
		System.out.print("Please Enter an ID To Look Up: ");
		String iDl = input.next();
								
		int location = id.find(iDl);
					
		if(location > -1)
		{
			System.out.println("\n"+data[location]+"\n");
		}
		else if(location == -1)
		{
			System.out.println("\nID not Found\n");
		}
					
	}
			
	//Makes sure no duplicate ID number gets inserted again.
	public int isiDinuse(String iD)
	{
		return (id.find(iD));
	}
				
	//Delete a student information(Id number,first name, last name) by ID number entered by user.
	public void deleteIt() 
	{
		System.out.print("\nPleasae Enter an ID to Delete: ");
		String iDD = input.next();
		int index = id.find(iDD);
		if(index > -1) 
		{
			id.delete(iDD);
			String firstname = data[index].getFname();
			fname.delete(firstname);
			String lastname = data[index].getLname();
			lname.delete(lastname);
			System.out.println("\nRecord of the student with"
					+ " ID number "+iDD+" has been Deleted.\n");
		}
		else if(index == -1)
		{
			System.out.println("\nID not Found: Record cannot be Deleted.\n");
		}
	}
				
	//Print out Student's information in increasing ID number order(0-9).
	public void ListByIDAscending()
	{
		ascending(id);
	}
				
	//Print out Student's information in increasing first name order(a-z).
	public void ListByFirstAscending()
	{
		ascending(fname);
	}
			    
	//Print out Student's information in increasing last name(a-z). 
	 public void ListByLastAscending()
	 {
		ascending(lname);
	 }
		        
	//Print out Student's information in decreasing ID number(9-0).
	public void ListByIDDescending()
	 {
		descending(id);
	 }
			   
	//Print out Student's information in decreasing first name order(z-a).
	 public void ListByFirstDescending()
	{
		descending(fname);
	 }
			   
	 //Print out Student's information in decreasing last name order(z-a). 
	 public void ListByLastDescending() 
	 {
		descending(lname);
	 }
			   
	//Loop to use iterator methods from index class to print from StudentRecord array in ascending order.
	 public void ascending(Index option) 
	 {		
		int frontwards = option.getFront();
		if(frontwards != -1)
			System.out.println(data[frontwards]);
					 
		option.start();
		while(option.hasNext()) 
		{
			System.out.println(data[option.getNext()]);
		}
	 }
			   
	//Loop to use iterator methods from index class to print from StudentRecord array in ascending order.
	public void descending(Index option)
	{	
		int backwards = option.getBack();
		if(backwards != -1)
			System.out.println(data[backwards]);
					 
		option.end();
		while(option.hasPrevious()) 
		{
			System.out.println(data[option.getPrevious()]);
		}
							  
	}
}




Index.java


package PA2;

//Index class to make a Doubly Double Ended Ordered LinkedList.
public class Index
{
	//Doubly Double Ended Ordered LinkedList with an iterator to print student's information.
	public IndexRecord front; 
	public IndexRecord back;
	public IndexRecord iterator; 

	//default constructor
	public Index()
	{
		front = null;
		back = null;
		iterator = null;
	}
	
	//Insert Id number, first name, last name(key) in ascending order 
	//with  position (where) in main database.
	public void insert(IndexRecord s) 
	{
		IndexRecord newNode = s;
		IndexRecord rover=front;
		
		if(front == null) 
		{	front = newNode;
			back = newNode;
		}
		else
		{
			while(rover.getNext()!=null && rover.compareTo(s)<0) { 
				rover = rover.getNext();
			}
		
			
			if(rover.compareTo(s)>0)
			{
				newNode.setNext(rover);
				newNode.setPrev(rover.getPrev());
				
				if(rover.getPrev() == null)
				{
					front = newNode;
				}
				else
				{
					rover.getPrev().setNext(newNode);
				}
				rover.setPrev(newNode);
				}
			else
			{
				newNode.setPrev(rover);
				newNode.setNext(rover.getNext());
				
				if(rover.getNext() == null)
				{
					back = newNode;
				}
				else
				{
					rover.getNext().setPrev(newNode);
				}
				rover.setNext(newNode);
			}
		}
			
	}
		
	//find a student through IndexRecord.
	public int find (String id)
	{
		IndexRecord rover = front;
		while(rover != null)
		{
			if(rover.getKey().compareTo(id) == 0) break;
			rover = rover.getNext();
		}
		return (rover != null? rover.getWhere() : -1);
	}
	
	//Delete a student from IndexRecord.
	public IndexRecord delete(String key) 
	{
		IndexRecord rover, prev;
		prev=front;
		rover=front;
		if(rover==null) 
		{
			rover = null;
		}
		else if(rover.getKey().compareTo(key) == 0)
		{
					front=rover.getNext();
		}
		else 
		{
			while(rover !=null)
			{
				if(rover.getKey().compareTo(key)==0) break;
					prev=rover;
					rover=rover.getNext();
			}
			if(rover == null)
				rover = null;
			else
				prev.setNext(rover.getNext());
		}
		return (rover);
	}
	
	//List student's id number or first name or last name.
	public void list()
	{
		IndexRecord rover = front;
		while(rover != null)
		{
			System.out.println(rover);
			rover = rover.getNext();
		}
	}
	
	//check if indexRecord is empty.
	public boolean isEmpty()
	{
		return (front == null );
	}

	//Return front to print first student.
	public int  getFront() 
	{
		return(front != null? front.getWhere(): -1);
	}
	
	//Return back to print to print last student.
	public int getBack() {
		return (back != null? back.getWhere():-1);
	}
	
	//Iterator to print students by id,first name, and last name.
	//Set Iterator to the start of IndexRecord(LinkedList) to print frontwards..
	public void start()
	{
		iterator = front;
	}
	
	//Check if IndexRecord has more Indexes so the Iterator continues at true and stops at false.
	public boolean hasNext()
	{
		if(iterator != null)
			iterator = iterator.getNext();
		
		return(iterator != null? true:false);
	}
	//Get positions of Indexes(positions of student in main database) from IndexRecord to print in ascending order.
	public int getNext()
	{
		int temp = iterator.where;
		
		return (temp != -1? temp:-1);
	}
	//Set iterator to end of IndexRecord to start printing backwards.
	public void end()
	{
		iterator = back;
	}
	//Check if IndexRecord has previous Indexes(positions of student in main database) through iterator..
	public boolean hasPrevious()
	{
		if(iterator != null)
			iterator =iterator.getPrev();
		
		return(iterator != null? true:false);
	}
	
	//Get previous Indexes(positions of student in main database) to print descending order from   IndexRecord(LinkedList).
	public int getPrevious()
	{
		int temp = iterator.getWhere();
		
		return (temp != -1? temp: -1); 
	}
}




IndexRecord.java



package PA2;

//Doubly linked list.
public class IndexRecord 
{
	public IndexRecord prev, next; // Nodes
	public String key;// (id number, first name, or last name).
	public int where;//Position in main database.
	
	//Constructor for students info to be entered.
	public IndexRecord(String k, int w)
	{
		prev = null;
		next = null;
		this.key = k;
		this.where = w;
	}
	
	//Getters and Setters for DoublyLinked list.
	
	//Getter for previous .
	public IndexRecord getPrev() 
	{
		return prev;
	}
	
	//Setter for previous.
	public void setPrev(IndexRecord p) 
	{
		this.prev = p;
	}
	
	//Getter for next.
	public IndexRecord getNext() 
	{
		return next;
	}
	
	//Setter for next;
	public void setNext(IndexRecord next) 
	{
		this.next = next;
	}
	
	//Getter to get (first name,last name, and id number).
	public String getKey() 
	{
		return key;
	}
	
	//Getter to get position of a student in main database.
	public int getWhere() 
	{
		return where;
	}

	//Print id number or first name or last name with position in main database.
	public String toString()
	{
		return key+" "+where;
	}
	
	//Compareto method to enter in ascending order for the three strings(id number, first name, last name)
	public int compareTo(IndexRecord ir)
	{
		return key.compareTo(ir.key);
	}

	
}




StudentRecord.java



package PA2;

//StudentRecord class for main DataBase array.
public class StudentRecord 
{
	
	//Student's information (first name, last name, and id number ).
	private String fname;
	private String lname;
	private String iD;
	
	//Constructor for students to be entered.
	public StudentRecord (String f, String l, String i)
	{
		fname = f;
		lname = l;
		iD = i;
	}
	
	//Getters for student's information.
	
	//Getter for first name.
	public String getFname() 
	{
		return fname;
	}

	//Getter for last name.
	public String getLname() 
	{
		return lname;
	}

	//Getter for Id number.
	public String getiD() 
	{
		return iD;
	}
	
	//Print student information in this order.
	public String toString()
	{
		return iD+" "+fname+" "+lname;
	}

}